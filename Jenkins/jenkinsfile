pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '891377165332'
        AWS_REGION = 'eu-central-1'
        ECR_BACKEND_REPO_NAME = 'backend-repo'
        ECR_FRONTEND_REPO_NAME = 'frontend-repo'
        IMAGE_TAG = 'latest'
        TERRAFORM_DIR = 'Terraform'
        REPO_URL = 'https://github.com/DevCloud-Solutions/AI-Application.git' // GitHub repo URL'nizi buraya yazın
        WORKSPACE_DIR = 'test' // Workspace'inizi temsil eder
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo 'Cloning repository...'
                    checkout([$class: 'GitSCM', branches: [[name: '*/dev']],
                              userRemoteConfigs: [[url: env.REPO_URL]]])
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                script {
                    echo 'Checking workspace structure...'
                    sh '''
                        pwd
                        ls -l
                        ls -l Ansible/playbooks/
                    '''
                }
            }
        }

        stage('Generate Dynamic Ansible Inventory') {
            steps {
                dir(env.WORKSPACE_DIR) {
                    script {
                        echo 'Generating dynamic Ansible inventory...'
                        sh '''
                            terraform output -raw master_public_ip > master_ip.txt
                            terraform output -raw workerone_public_ip > workerone_ip.txt
                            terraform output -raw workertwo_public_ip > workertwo_ip.txt

                            python3 dynamic_inventory.py
                        '''
                    }
                }
            }
        }

        stage('Run Ansible Playbooks') {
            steps {
                sshagent(['ec2-user']) {
                    dir(env.WORKSPACE_DIR) {
                        script {
                            echo 'Running Ansible playbooks...'
                            sh '''
                                python3 dynamic_inventory.py
                                ls -l Ansible/playbooks/  # Doğru dosyaların olduğundan emin olun
                                ansible-playbook -i dynamic_inventory.py Ansible/playbooks/master_setup.yml
                            '''
                        }
                    }
                }
            }
        }

        stage('Approve Destroy') {
            steps {
                script {
                    echo 'Waiting for approval to destroy infrastructure...'
                    input message: 'Approve Terraform destroy?', ok: 'Destroy'
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                dir(env.WORKSPACE_DIR) {
                    script {
                        echo 'Destroying infrastructure...'
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Cleaning up workspace...'
                deleteDir()
            }
        }

        failure {
            script {
                echo 'Pipeline failed. Check the logs for details.'
            }
        }

        success {
            script {
                echo 'Pipeline completed successfully.'
            }
        }
    }
}




//         stage('Approve Destroy') {
//             steps {
//                 script {
//                     def destroyApproval = input message: 'Tüm altyapıyı silmek istediğinize emin misiniz?', ok: 'Evet, Sil', parameters: [
//                         choice(name: 'ConfirmDestroy', choices: ['Hayır', 'Evet'], description: 'Devam etmek istiyor musunuz?')
//                     ]
//                     if (destroyApproval != 'Evet') {
//                         error("Destroy işlemi iptal edildi.")
//                     }
//                 }
//             }
//         }

//         stage('Terraform Destroy') {
//             steps {
//                 dir("${TERRAFORM_DIR}") {
//                     sh 'terraform destroy -auto-approve'
//                 }
//             }
//         }
//     }
// }

    
//         stage('Build Backend Docker Image') {
//             steps {
//                 script {
//                     sh 'docker build -t ${ECR_BACKEND_REPO_NAME}:${IMAGE_TAG} -f backend/Dockerfile .'
//                 }
//             }
//         }

//         stage('Build Frontend Docker Image') {
//             steps {
//                 script {
//                     sh 'docker build -t ${ECR_FRONTEND_REPO_NAME}:${IMAGE_TAG} -f frontend/Dockerfile .'
//                 }
//             }
//         }

//         stage('Login to AWS ECR') {
//             steps {
//                 script {
//                     sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
//                 }
//             }
//         }

//         stage('Tag and Push Docker Images to ECR') {
//             steps {
//                 script {
//                     sh 'docker tag ${ECR_BACKEND_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND_REPO_NAME}:${IMAGE_TAG}'
//                     sh 'docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND_REPO_NAME}:${IMAGE_TAG}'

//                     sh 'docker tag ${ECR_FRONTEND_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_FRONTEND_REPO_NAME}:${IMAGE_TAG}'
//                     sh 'docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_FRONTEND_REPO_NAME}:${IMAGE_TAG}'
//                 }
//             }
//         }

//         stage('Deploy to Kubernetes') {
//             steps {
//                 script {
//                     sh 'kubectl set image deployment/backend-deployment backend=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND_REPO_NAME}:${IMAGE_TAG}'
//                     sh 'kubectl set image deployment/frontend-deployment frontend=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_FRONTEND_REPO_NAME}:${IMAGE_TAG}'
//                 }
//             }
//         }

//         stage('Terraform Destroy on Failure') {
//             when {
//                 expression {
//                     currentBuild.result == 'FAILURE'
//                 }
//             }
//             steps {
//                 dir("${TERRAFORM_DIR}") {
//                     script {
//                         sh 'terraform destroy -auto-approve'
//                     }
//                 }
//             }
//         }
//     }

//     post {
//         always {
//             cleanWs()
//         }
//     }
// }
